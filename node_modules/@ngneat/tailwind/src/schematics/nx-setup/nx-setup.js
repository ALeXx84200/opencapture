"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
function default_1(options) {
    return (tree, context) => {
        if (!utils_1.isNx(tree)) {
            context.logger.fatal('Schematics is not invoked inside of a Nx workspace. Please try again in a Nx workspace.');
            return;
        }
        const { enableTailwindInComponentsStyles, projectName, appsDir, libsDir } = normalizeOptions(options, tree, context);
        return schematics_1.chain([
            addDependenciesToPackageJson(),
            utils_1.addConfigFiles(enableTailwindInComponentsStyles, appsDir, libsDir),
            utils_1.updateWorkspaceTargets(projectName, workspace_1.updateWorkspace),
            utils_1.updateProjectRootStyles(projectName, workspace_1.getWorkspace, workspace_1.InsertChange),
        ])(tree, context);
    };
}
exports.default = default_1;
function addDependenciesToPackageJson() {
    return (tree, ctx) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const devDeps = (yield Promise.all([...constants_1.DEPENDENCIES].map((dep) => utils_1.getLatestNodeVersion(dep).then(({ name, version }) => {
            ctx.logger.info(`✅️ Added ${name}@${version}`);
            return { name, version };
        })))).reduce((result, { name, version }) => {
            result[name] = version;
            return result;
        }, {});
        return workspace_1.addDepsToPackageJson({}, devDeps)(tree, ctx);
    });
}
function normalizeOptions(options, tree, context) {
    const project = getDefaultProjectFromGraph(workspace_1.getProjectGraphFromHost(tree), options.project);
    if (project == null) {
        const msg = `Cannot find any Angular project in the current workspace.`;
        context.logger.fatal(msg);
        throw new Error(msg);
    }
    return Object.assign(Object.assign({}, options), { project: project.name, projectName: project.name, projectDirectory: project.data.root
            .split(workspace_1.projectRootDir(workspace_1.ProjectType.Application) + '/')
            .pop(), projectRoot: project.data.root, appsDir: ast_utils_1.appsDir(tree), libsDir: ast_utils_1.libsDir(tree) });
}
function getDefaultProjectFromGraph(graph, projectName) {
    if (projectName)
        return graph.nodes[projectName];
    return Object.values(graph.nodes).find((node) => node.type === 'app' &&
        node.data.projectType === workspace_1.ProjectType.Application &&
        Object.values(node.data.architect).some((target) => target.builder.includes('angular')));
}
//# sourceMappingURL=nx-setup.js.map