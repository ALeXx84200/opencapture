/**
 * @fileoverview added by tsickle
 * Generated from: lib/mutliselect/ngsg-selection.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fromEvent, merge, Subject } from 'rxjs';
import { filter, mapTo, withLatestFrom } from 'rxjs/operators';
import { NgsgClassService } from '../helpers/class/ngsg-class.service';
import { NgsgElementsHelper } from '../helpers/element/ngsg-elements.helper';
import { NgsgStoreService } from '../store/ngsg-store.service';
import * as i0 from "@angular/core";
import * as i1 from "../helpers/class/ngsg-class.service";
import * as i2 from "../store/ngsg-store.service";
/** @enum {number} */
const ChangeAction = {
    ADD: 0,
    REMOVE: 1,
};
ChangeAction[ChangeAction.ADD] = 'ADD';
ChangeAction[ChangeAction.REMOVE] = 'REMOVE';
/**
 * @record
 */
function SelectionChange() { }
if (false) {
    /** @type {?} */
    SelectionChange.prototype.key;
    /** @type {?} */
    SelectionChange.prototype.item;
    /** @type {?} */
    SelectionChange.prototype.action;
}
export class NgsgSelectionService {
    /**
     * @param {?} classService
     * @param {?} ngsgStore
     */
    constructor(classService, ngsgStore) {
        this.classService = classService;
        this.ngsgStore = ngsgStore;
        this.COMMAND_KEY = 'Meta';
        this.CONTROL_KEY = 'Control';
        this.selectionChange$ = new Subject();
        /** @type {?} */
        const selectionKeyPressed$ = this.selectionKeyPressed();
        this.selectionChange$
            .pipe(withLatestFrom(selectionKeyPressed$))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([selectionChange, selectionKeyPressed]) => {
            selectionKeyPressed
                ? this.handleSelectionChange(selectionChange)
                : this.resetSelectedItems(selectionChange.key);
        }));
    }
    /**
     * @private
     * @param {?} group
     * @return {?}
     */
    resetSelectedItems(group) {
        this.ngsgStore.getSelectedItems(group).forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => this.classService.removeSelectedClass(item.node)));
        this.ngsgStore.resetSelectedItems(group);
    }
    /**
     * @private
     * @param {?} selectionChange
     * @return {?}
     */
    handleSelectionChange(selectionChange) {
        if (selectionChange.action === ChangeAction.ADD) {
            this.classService.addSelectedClass(selectionChange.item);
            this.ngsgStore.addSelectedItem(selectionChange.key, {
                node: selectionChange.item,
                originalIndex: NgsgElementsHelper.findIndex(selectionChange.item)
            });
        }
        if (selectionChange.action === ChangeAction.REMOVE) {
            this.classService.removeSelectedClass(selectionChange.item);
            this.ngsgStore.removeSelectedItem(selectionChange.key, selectionChange.item);
        }
    }
    /**
     * @private
     * @return {?}
     */
    selectionKeyPressed() {
        /** @type {?} */
        const selectionKeyPressed = fromEvent(window, 'keydown').pipe(filter((/**
         * @param {?} keyboardEvent
         * @return {?}
         */
        (keyboardEvent) => keyboardEvent.key === this.COMMAND_KEY || keyboardEvent.key === this.CONTROL_KEY)), mapTo(true));
        /** @type {?} */
        const keyup = fromEvent(window, 'keyup').pipe(mapTo(false));
        return merge(selectionKeyPressed, keyup);
    }
    /**
     * @param {?} group
     * @param {?} dragedElement
     * @return {?}
     */
    selectElementIfNoSelection(group, dragedElement) {
        if (this.ngsgStore.hasSelectedItems(group)) {
            return;
        }
        this.ngsgStore.addSelectedItem(group, {
            node: dragedElement,
            originalIndex: NgsgElementsHelper.findIndex(dragedElement)
        });
    }
    /**
     * @param {?} key
     * @param {?} item
     * @param {?} selected
     * @return {?}
     */
    updateSelectedDragItem(key, item, selected) {
        this.selectionChange$.next({
            key,
            item,
            action: selected ? ChangeAction.ADD : ChangeAction.REMOVE
        });
    }
}
NgsgSelectionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgsgSelectionService.ctorParameters = () => [
    { type: NgsgClassService },
    { type: NgsgStoreService }
];
/** @nocollapse */ NgsgSelectionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgsgSelectionService_Factory() { return new NgsgSelectionService(i0.ɵɵinject(i1.NgsgClassService), i0.ɵɵinject(i2.NgsgStoreService)); }, token: NgsgSelectionService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgsgSelectionService.prototype.COMMAND_KEY;
    /**
     * @type {?}
     * @private
     */
    NgsgSelectionService.prototype.CONTROL_KEY;
    /**
     * @type {?}
     * @private
     */
    NgsgSelectionService.prototype.selectionChange$;
    /**
     * @type {?}
     * @private
     */
    NgsgSelectionService.prototype.classService;
    /**
     * @type {?}
     * @private
     */
    NgsgSelectionService.prototype.ngsgStore;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdzZy1zZWxlY3Rpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXNvcnRncmlkL3NyYy9saWIvbXV0bGlzZWxlY3QvbmdzZy1zZWxlY3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBYSxjQUFjLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUNyRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSx5Q0FBeUMsQ0FBQztBQUMzRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7QUFFN0QsTUFBSyxZQUFZO0lBQ2YsR0FBRyxHQUFBO0lBQ0gsTUFBTSxHQUFBO0VBQ1A7Ozs7OztBQUVELDhCQUlDOzs7SUFIQyw4QkFBWTs7SUFDWiwrQkFBYzs7SUFDZCxpQ0FBcUI7O0FBTXZCLE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBTS9CLFlBQW9CLFlBQThCLEVBQVUsU0FBMkI7UUFBbkUsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFML0UsZ0JBQVcsR0FBRyxNQUFNLENBQUM7UUFDckIsZ0JBQVcsR0FBRyxTQUFTLENBQUM7UUFFeEIscUJBQWdCLEdBQUcsSUFBSSxPQUFPLEVBQW1CLENBQUM7O2NBR2xELG9CQUFvQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtRQUN2RCxJQUFJLENBQUMsZ0JBQWdCO2FBQ2xCLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENB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QUFNO1NBQzFELENBQUMsQ0FBQztJQUNMLENBQUM7OztZQW5FRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFqQk8sZ0JBQWdCO1lBRWhCLGdCQUFnQjs7Ozs7Ozs7SUFpQnRCLDJDQUE2Qjs7Ozs7SUFDN0IsMkNBQWdDOzs7OztJQUVoQyxnREFBMEQ7Ozs7O0lBRTlDLDRDQUFzQzs7Ozs7SUFBRSx5Q0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtmcm9tRXZlbnQsIG1lcmdlLCBORVZFUiwgT2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwVG8sIHN3aXRjaE1hcCwgd2l0aExhdGVzdEZyb219IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtOZ3NnQ2xhc3NTZXJ2aWNlfSBmcm9tICcuLi9oZWxwZXJzL2NsYXNzL25nc2ctY2xhc3Muc2VydmljZSc7XG5pbXBvcnQge05nc2dFbGVtZW50c0hlbHBlcn0gZnJvbSAnLi4vaGVscGVycy9lbGVtZW50L25nc2ctZWxlbWVudHMuaGVscGVyJztcbmltcG9ydCB7TmdzZ1N0b3JlU2VydmljZX0gZnJvbSAnLi4vc3RvcmUvbmdzZy1zdG9yZS5zZXJ2aWNlJztcblxuZW51bSBDaGFuZ2VBY3Rpb24ge1xuICBBREQsXG4gIFJFTU9WRVxufVxuXG5pbnRlcmZhY2UgU2VsZWN0aW9uQ2hhbmdlIHtcbiAga2V5OiBzdHJpbmc7XG4gIGl0ZW06IEVsZW1lbnQ7XG4gIGFjdGlvbjogQ2hhbmdlQWN0aW9uO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3NnU2VsZWN0aW9uU2VydmljZSB7XG4gIHByaXZhdGUgQ09NTUFORF9LRVkgPSAnTWV0YSc7XG4gIHByaXZhdGUgQ09OVFJPTF9LRVkgPSAnQ29udHJvbCc7XG5cbiAgcHJpdmF0ZSBzZWxlY3Rpb25DaGFuZ2UkID0gbmV3IFN1YmplY3Q8U2VsZWN0aW9uQ2hhbmdlPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xhc3NTZXJ2aWNlOiBOZ3NnQ2xhc3NTZXJ2aWNlLCBwcml2YXRlIG5nc2dTdG9yZTogTmdzZ1N0b3JlU2VydmljZSkge1xuICAgIGNvbnN0IHNlbGVjdGlvbktleVByZXNzZWQkID0gdGhpcy5zZWxlY3Rpb25LZXlQcmVzc2VkKCk7XG4gICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UkXG4gICAgICAucGlwZSh3aXRoTGF0ZXN0RnJvbShzZWxlY3Rpb25LZXlQcmVzc2VkJCkpXG4gICAgICAuc3Vic2NyaWJlKChbc2VsZWN0aW9uQ2hhbmdlLCBzZWxlY3Rpb25LZXlQcmVzc2VkXSkgPT4ge1xuICAgICAgICBzZWxlY3Rpb25LZXlQcmVzc2VkXG4gICAgICAgICAgPyB0aGlzLmhhbmRsZVNlbGVjdGlvbkNoYW5nZShzZWxlY3Rpb25DaGFuZ2UpXG4gICAgICAgICAgOiB0aGlzLnJlc2V0U2VsZWN0ZWRJdGVtcyhzZWxlY3Rpb25DaGFuZ2Uua2V5KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldFNlbGVjdGVkSXRlbXMoZ3JvdXA6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubmdzZ1N0b3JlLmdldFNlbGVjdGVkSXRlbXMoZ3JvdXApLmZvckVhY2goaXRlbSA9PiB0aGlzLmNsYXNzU2VydmljZS5yZW1vdmVTZWxlY3RlZENsYXNzKGl0ZW0ubm9kZSkpO1xuICAgIHRoaXMubmdzZ1N0b3JlLnJlc2V0U2VsZWN0ZWRJdGVtcyhncm91cCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVNlbGVjdGlvbkNoYW5nZShzZWxlY3Rpb25DaGFuZ2U6IFNlbGVjdGlvbkNoYW5nZSk6IHZvaWQge1xuICAgIGlmIChzZWxlY3Rpb25DaGFuZ2UuYWN0aW9uID09PSBDaGFuZ2VBY3Rpb24uQUREKSB7XG4gICAgICB0aGlzLmNsYXNzU2VydmljZS5hZGRTZWxlY3RlZENsYXNzKHNlbGVjdGlvbkNoYW5nZS5pdGVtKTtcbiAgICAgIHRoaXMubmdzZ1N0b3JlLmFkZFNlbGVjdGVkSXRlbShzZWxlY3Rpb25DaGFuZ2Uua2V5LCB7XG4gICAgICAgIG5vZGU6IHNlbGVjdGlvbkNoYW5nZS5pdGVtLFxuICAgICAgICBvcmlnaW5hbEluZGV4OiBOZ3NnRWxlbWVudHNIZWxwZXIuZmluZEluZGV4KHNlbGVjdGlvbkNoYW5nZS5pdGVtKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzZWxlY3Rpb25DaGFuZ2UuYWN0aW9uID09PSBDaGFuZ2VBY3Rpb24uUkVNT1ZFKSB7XG4gICAgICB0aGlzLmNsYXNzU2VydmljZS5yZW1vdmVTZWxlY3RlZENsYXNzKHNlbGVjdGlvbkNoYW5nZS5pdGVtKTtcbiAgICAgIHRoaXMubmdzZ1N0b3JlLnJlbW92ZVNlbGVjdGVkSXRlbShzZWxlY3Rpb25DaGFuZ2Uua2V5LCBzZWxlY3Rpb25DaGFuZ2UuaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZWxlY3Rpb25LZXlQcmVzc2VkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbktleVByZXNzZWQgPSBmcm9tRXZlbnQod2luZG93LCAna2V5ZG93bicpLnBpcGUoXG4gICAgICBmaWx0ZXIoXG4gICAgICAgIChrZXlib2FyZEV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PlxuICAgICAgICAgIGtleWJvYXJkRXZlbnQua2V5ID09PSB0aGlzLkNPTU1BTkRfS0VZIHx8IGtleWJvYXJkRXZlbnQua2V5ID09PSB0aGlzLkNPTlRST0xfS0VZXG4gICAgICApLFxuICAgICAgbWFwVG8odHJ1ZSlcbiAgICApO1xuICAgIGNvbnN0IGtleXVwID0gZnJvbUV2ZW50KHdpbmRvdywgJ2tleXVwJykucGlwZShtYXBUbyhmYWxzZSkpO1xuICAgIHJldHVybiBtZXJnZShzZWxlY3Rpb25LZXlQcmVzc2VkLCBrZXl1cCk7XG4gIH1cblxuICBwdWJsaWMgc2VsZWN0RWxlbWVudElmTm9TZWxlY3Rpb24oZ3JvdXA6IHN0cmluZywgZHJhZ2VkRWxlbWVudDogRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm5nc2dTdG9yZS5oYXNTZWxlY3RlZEl0ZW1zKGdyb3VwKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5nc2dTdG9yZS5hZGRTZWxlY3RlZEl0ZW0oZ3JvdXAsIHtcbiAgICAgIG5vZGU6IGRyYWdlZEVsZW1lbnQsXG4gICAgICBvcmlnaW5hbEluZGV4OiBOZ3NnRWxlbWVudHNIZWxwZXIuZmluZEluZGV4KGRyYWdlZEVsZW1lbnQpXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlU2VsZWN0ZWREcmFnSXRlbShrZXk6IHN0cmluZywgaXRlbTogRWxlbWVudCwgc2VsZWN0ZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZSQubmV4dCh7XG4gICAgICBrZXksXG4gICAgICBpdGVtLFxuICAgICAgYWN0aW9uOiBzZWxlY3RlZCA/IENoYW5nZUFjdGlvbi5BREQgOiBDaGFuZ2VBY3Rpb24uUkVNT1ZFXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==