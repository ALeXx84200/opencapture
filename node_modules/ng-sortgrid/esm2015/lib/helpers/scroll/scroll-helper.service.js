/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers/scroll/scroll-helper.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @record
 */
export function ScrollPoints() { }
if (false) {
    /** @type {?|undefined} */
    ScrollPoints.prototype.top;
    /** @type {?|undefined} */
    ScrollPoints.prototype.bottom;
}
export class ScrollHelperService {
    /**
     * @param {?} document
     */
    constructor(document) {
        this.document = document;
        this.DEFAULT_SCROLLSPEED = 50;
        this.SCROLL_BUFFER = 50;
        this.window = document.defaultView;
    }
    /**
     * @param {?} event
     * @param {?=} scrollPoints
     * @param {?=} scrollSpeed
     * @return {?}
     */
    scrollIfNecessary(event, scrollPoints = {}, scrollSpeed) {
        /** @type {?} */
        const currentPosition = event.pageY - this.window.scrollY;
        if (this.isTopScrollNeeded(currentPosition, scrollPoints.top)) {
            this.window.scrollBy({ top: -scrollSpeed || -this.DEFAULT_SCROLLSPEED, behavior: 'smooth' });
            return;
        }
        if (this.isBottomScrollNeeded(currentPosition, scrollPoints.bottom)) {
            this.window.scrollBy({ top: scrollSpeed || this.DEFAULT_SCROLLSPEED, behavior: 'smooth' });
        }
    }
    /**
     * @private
     * @param {?} currentPosition
     * @param {?} scrollPointTop
     * @return {?}
     */
    isTopScrollNeeded(currentPosition, scrollPointTop) {
        return scrollPointTop ? currentPosition < scrollPointTop :
            currentPosition < this.SCROLL_BUFFER;
    }
    /**
     * @private
     * @param {?} currentPosition
     * @param {?} scrollPointBottom
     * @return {?}
     */
    isBottomScrollNeeded(currentPosition, scrollPointBottom) {
        return scrollPointBottom ? currentPosition > scrollPointBottom :
            currentPosition > this.window.innerHeight - this.SCROLL_BUFFER;
    }
}
ScrollHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ScrollHelperService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ ScrollHelperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollHelperService_Factory() { return new ScrollHelperService(i0.ɵɵinject(i1.DOCUMENT)); }, token: ScrollHelperService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScrollHelperService.prototype.window;
    /**
     * @type {?}
     * @private
     */
    ScrollHelperService.prototype.DEFAULT_SCROLLSPEED;
    /**
     * @type {?}
     * @private
     */
    ScrollHelperService.prototype.SCROLL_BUFFER;
    /**
     * @type {?}
     * @private
     */
    ScrollHelperService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWhlbHBlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctc29ydGdyaWQvc3JjL2xpYi9oZWxwZXJzL3Njcm9sbC9zY3JvbGwtaGVscGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7OztBQUVqRCxrQ0FHQzs7O0lBRkMsMkJBQWE7O0lBQ2IsOEJBQWdCOztBQU1sQixNQUFNLE9BQU8sbUJBQW1COzs7O0lBTTlCLFlBQXNDLFFBQVE7UUFBUixhQUFRLEdBQVIsUUFBUSxDQUFBO1FBSHRDLHdCQUFtQixHQUFHLEVBQUUsQ0FBQztRQUN6QixrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUd6QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7SUFDckMsQ0FBQzs7Ozs7OztJQUVNLGlCQUFpQixDQUFDLEtBQVUsRUFBRSxlQUE2QixFQUFFLEVBQUUsV0FBb0I7O2NBQ2xGLGVBQWUsR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTztRQUV6RCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDO1lBQzNGLE9BQU87U0FDUjtRQUVELElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxHQUFHLEVBQUUsV0FBVyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztTQUMxRjtJQUNILENBQUM7Ozs7Ozs7SUFFTyxpQkFBaUIsQ0FBQyxlQUF1QixFQUFFLGNBQXNCO1FBQ3ZFLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLENBQUM7WUFDeEQsZUFBZSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDekMsQ0FBQzs7Ozs7OztJQUVPLG9CQUFvQixDQUFDLGVBQXVCLEVBQUUsaUJBQXlCO1FBQzdFLE9BQU8saUJBQWlCLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzlELGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQ25FLENBQUM7OztZQWxDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7NENBT2MsTUFBTSxTQUFDLFFBQVE7Ozs7Ozs7O0lBSjVCLHFDQUE0Qjs7Ozs7SUFDNUIsa0RBQWlDOzs7OztJQUNqQyw0Q0FBMkI7Ozs7O0lBRWYsdUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTY3JvbGxQb2ludHMge1xuICB0b3A/OiBudW1iZXI7XG4gIGJvdHRvbT86IG51bWJlcjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsSGVscGVyU2VydmljZSB7XG5cbiAgcHJpdmF0ZSB3aW5kb3c6IFdpbmRvd1Byb3h5O1xuICBwcml2YXRlIERFRkFVTFRfU0NST0xMU1BFRUQgPSA1MDtcbiAgcHJpdmF0ZSBTQ1JPTExfQlVGRkVSID0gNTA7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCkge1xuICAgIHRoaXMud2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsSWZOZWNlc3NhcnkoZXZlbnQ6IGFueSwgc2Nyb2xsUG9pbnRzOiBTY3JvbGxQb2ludHMgPSB7fSwgc2Nyb2xsU3BlZWQ/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSBldmVudC5wYWdlWSAtIHRoaXMud2luZG93LnNjcm9sbFk7XG5cbiAgICBpZiAodGhpcy5pc1RvcFNjcm9sbE5lZWRlZChjdXJyZW50UG9zaXRpb24sIHNjcm9sbFBvaW50cy50b3ApKSB7XG4gICAgICB0aGlzLndpbmRvdy5zY3JvbGxCeSh7dG9wOiAtc2Nyb2xsU3BlZWQgfHwgLXRoaXMuREVGQVVMVF9TQ1JPTExTUEVFRCwgYmVoYXZpb3I6ICdzbW9vdGgnfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNCb3R0b21TY3JvbGxOZWVkZWQoY3VycmVudFBvc2l0aW9uLCBzY3JvbGxQb2ludHMuYm90dG9tKSkge1xuICAgICAgdGhpcy53aW5kb3cuc2Nyb2xsQnkoe3RvcDogc2Nyb2xsU3BlZWQgfHwgdGhpcy5ERUZBVUxUX1NDUk9MTFNQRUVELCBiZWhhdmlvcjogJ3Ntb290aCd9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzVG9wU2Nyb2xsTmVlZGVkKGN1cnJlbnRQb3NpdGlvbjogbnVtYmVyLCBzY3JvbGxQb2ludFRvcDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHNjcm9sbFBvaW50VG9wID8gY3VycmVudFBvc2l0aW9uIDwgc2Nyb2xsUG9pbnRUb3AgOlxuICAgICAgY3VycmVudFBvc2l0aW9uIDwgdGhpcy5TQ1JPTExfQlVGRkVSO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0JvdHRvbVNjcm9sbE5lZWRlZChjdXJyZW50UG9zaXRpb246IG51bWJlciwgc2Nyb2xsUG9pbnRCb3R0b206IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzY3JvbGxQb2ludEJvdHRvbSA/IGN1cnJlbnRQb3NpdGlvbiA+IHNjcm9sbFBvaW50Qm90dG9tIDpcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA+IHRoaXMud2luZG93LmlubmVySGVpZ2h0IC0gdGhpcy5TQ1JPTExfQlVGRkVSO1xuICB9XG59XG4iXX0=