/**
 * @fileoverview added by tsickle
 * Generated from: lib/sort/reflection/ngsg-reflect.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgsgElementsHelper } from '../../helpers/element/ngsg-elements.helper';
import { NgsgStoreService } from '../../store/ngsg-store.service';
import * as i0 from "@angular/core";
import * as i1 from "../../store/ngsg-store.service";
export class NgsgReflectService {
    /**
     * @param {?} ngsgStore
     */
    constructor(ngsgStore) {
        this.ngsgStore = ngsgStore;
    }
    /**
     * @param {?} key
     * @param {?} element
     * @return {?}
     */
    reflectChanges(key, element) {
        /** @type {?} */
        const items = this.ngsgStore.getItems(key);
        /** @type {?} */
        const selectedElements = this.ngsgStore.getSelectedItems(key);
        /** @type {?} */
        const selectedElementIndices = this.getSelectedElementsIndices(selectedElements);
        /** @type {?} */
        const selectedItems = this.getSelectedItems(items, selectedElementIndices);
        /** @type {?} */
        const sortedIndices = selectedElementIndices.sort();
        /** @type {?} */
        const dropIndex = this.findDropIndex(selectedElements, element);
        while (sortedIndices.length > 0) {
            items.splice(sortedIndices.pop(), 1);
        }
        /** @type {?} */
        const result = this.getReflectedItems(items, selectedItems, dropIndex);
        this.ngsgStore.setItems(key, result);
        return result;
    }
    /**
     * @private
     * @param {?} items
     * @param {?} selectedItems
     * @param {?} dropIndex
     * @return {?}
     */
    getReflectedItems(items, selectedItems, dropIndex) {
        /** @type {?} */
        const beforeSelection = items.slice(0, dropIndex);
        /** @type {?} */
        const afterSelection = items.slice(dropIndex, items.length);
        return [...beforeSelection, ...selectedItems, ...afterSelection];
    }
    /**
     * @private
     * @param {?} items
     * @param {?} selectedElementIndexes
     * @return {?}
     */
    getSelectedItems(items, selectedElementIndexes) {
        /** @type {?} */
        const selectedItems = [];
        selectedElementIndexes.forEach((/**
         * @param {?} index
         * @return {?}
         */
        index => {
            selectedItems.push(items[index]);
        }));
        return selectedItems;
    }
    /**
     * @private
     * @param {?} selectedElements
     * @return {?}
     */
    getSelectedElementsIndices(selectedElements) {
        return selectedElements.map((/**
         * @param {?} selectedElement
         * @return {?}
         */
        (selectedElement) => selectedElement.originalIndex));
    }
    /**
     * @private
     * @param {?} selectedElements
     * @param {?} element
     * @return {?}
     */
    findDropIndex(selectedElements, element) {
        if (this.isDropInSelection(selectedElements, element)) {
            return NgsgElementsHelper.findIndex(selectedElements[0].node);
        }
        return NgsgElementsHelper.findIndex(element);
    }
    /**
     * @private
     * @param {?} collection
     * @param {?} dropElement
     * @return {?}
     */
    isDropInSelection(collection, dropElement) {
        return !!collection.find((/**
         * @param {?} dragElment
         * @return {?}
         */
        (dragElment) => dragElment.node === dropElement));
    }
}
NgsgReflectService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgsgReflectService.ctorParameters = () => [
    { type: NgsgStoreService }
];
/** @nocollapse */ NgsgReflectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgsgReflectService_Factory() { return new NgsgReflectService(i0.ɵɵinject(i1.NgsgStoreService)); }, token: NgsgReflectService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgsgReflectService.prototype.ngsgStore;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdzZy1yZWZsZWN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1zb3J0Z3JpZC9zcmMvbGliL3NvcnQvcmVmbGVjdGlvbi9uZ3NnLXJlZmxlY3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFFOUUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7OztBQUtoRSxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBQzdCLFlBQW9CLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO0lBQUcsQ0FBQzs7Ozs7O0lBRTVDLGNBQWMsQ0FBQyxHQUFXLEVBQUUsT0FBZ0I7O2NBQzNDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7O2NBQ3BDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDOztjQUN2RCxzQkFBc0IsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUM7O2NBQzFFLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDOztjQUNwRSxhQUFhLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxFQUFFOztjQUM3QyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUM7UUFFL0QsT0FBTyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQixLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN0Qzs7Y0FFSyxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7Ozs7OztJQUVPLGlCQUFpQixDQUFDLEtBQVUsRUFBRSxhQUFrQixFQUFFLFNBQWlCOztjQUNuRSxlQUFlLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDOztjQUMzQyxjQUFjLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzRCxPQUFPLENBQUMsR0FBRyxlQUFlLEVBQUUsR0FBRyxhQUFhLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7Ozs7O0lBRU8sZ0JBQWdCLENBQUMsS0FBWSxFQUFFLHNCQUFnQzs7Y0FDL0QsYUFBYSxHQUFHLEVBQUU7UUFDeEIsc0JBQXNCLENBQUMsT0FBTzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDOzs7Ozs7SUFFTywwQkFBMEIsQ0FBQyxnQkFBbUM7UUFDcEUsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxlQUFnQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFDLENBQUM7SUFDbkcsQ0FBQzs7Ozs7OztJQUVPLGFBQWEsQ0FBQyxnQkFBbUMsRUFBRSxPQUFnQjtRQUN6RSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsRUFBRTtZQUNyRCxPQUFPLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvRDtRQUNELE9BQU8sa0JBQWtCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7Ozs7SUFFTyxpQkFBaUIsQ0FBQyxVQUE2QixFQUFFLFdBQW9CO1FBQzNFLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxVQUEyQixFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBQyxDQUFDO0lBQzdGLENBQUM7OztZQWxERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFKTyxnQkFBZ0I7Ozs7Ozs7O0lBTVYsdUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge05nc2dFbGVtZW50c0hlbHBlcn0gZnJvbSAnLi4vLi4vaGVscGVycy9lbGVtZW50L25nc2ctZWxlbWVudHMuaGVscGVyJztcbmltcG9ydCB7TmdzZ0RyYWdlbGVtZW50fSBmcm9tICcuLi8uLi9zaGFyZWQvbmdzZy1kcmFnZWxlbWVudC5tb2RlbCc7XG5pbXBvcnQge05nc2dTdG9yZVNlcnZpY2V9IGZyb20gJy4uLy4uL3N0b3JlL25nc2ctc3RvcmUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nc2dSZWZsZWN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdzZ1N0b3JlOiBOZ3NnU3RvcmVTZXJ2aWNlKSB7fVxuXG4gIHB1YmxpYyByZWZsZWN0Q2hhbmdlcyhrZXk6IHN0cmluZywgZWxlbWVudDogRWxlbWVudCk6IGFueVtdIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMubmdzZ1N0b3JlLmdldEl0ZW1zKGtleSk7XG4gICAgY29uc3Qgc2VsZWN0ZWRFbGVtZW50cyA9IHRoaXMubmdzZ1N0b3JlLmdldFNlbGVjdGVkSXRlbXMoa2V5KTtcbiAgICBjb25zdCBzZWxlY3RlZEVsZW1lbnRJbmRpY2VzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzSW5kaWNlcyhzZWxlY3RlZEVsZW1lbnRzKTtcbiAgICBjb25zdCBzZWxlY3RlZEl0ZW1zID0gdGhpcy5nZXRTZWxlY3RlZEl0ZW1zKGl0ZW1zLCBzZWxlY3RlZEVsZW1lbnRJbmRpY2VzKTtcbiAgICBjb25zdCBzb3J0ZWRJbmRpY2VzID0gc2VsZWN0ZWRFbGVtZW50SW5kaWNlcy5zb3J0KCk7XG4gICAgY29uc3QgZHJvcEluZGV4ID0gdGhpcy5maW5kRHJvcEluZGV4KHNlbGVjdGVkRWxlbWVudHMsIGVsZW1lbnQpO1xuXG4gICAgd2hpbGUgKHNvcnRlZEluZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgaXRlbXMuc3BsaWNlKHNvcnRlZEluZGljZXMucG9wKCksIDEpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZ2V0UmVmbGVjdGVkSXRlbXMoaXRlbXMsIHNlbGVjdGVkSXRlbXMsIGRyb3BJbmRleCk7XG4gICAgdGhpcy5uZ3NnU3RvcmUuc2V0SXRlbXMoa2V5LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGdldFJlZmxlY3RlZEl0ZW1zKGl0ZW1zOiBhbnksIHNlbGVjdGVkSXRlbXM6IGFueSwgZHJvcEluZGV4OiBudW1iZXIpOiBhbnlbXSB7XG4gICAgY29uc3QgYmVmb3JlU2VsZWN0aW9uID0gaXRlbXMuc2xpY2UoMCwgZHJvcEluZGV4KTtcbiAgICBjb25zdCBhZnRlclNlbGVjdGlvbiA9IGl0ZW1zLnNsaWNlKGRyb3BJbmRleCwgaXRlbXMubGVuZ3RoKTtcbiAgICByZXR1cm4gWy4uLmJlZm9yZVNlbGVjdGlvbiwgLi4uc2VsZWN0ZWRJdGVtcywgLi4uYWZ0ZXJTZWxlY3Rpb25dO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTZWxlY3RlZEl0ZW1zKGl0ZW1zOiBhbnlbXSwgc2VsZWN0ZWRFbGVtZW50SW5kZXhlczogbnVtYmVyW10pOiBhbnlbXSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRJdGVtcyA9IFtdO1xuICAgIHNlbGVjdGVkRWxlbWVudEluZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzZWxlY3RlZEl0ZW1zLnB1c2goaXRlbXNbaW5kZXhdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZWN0ZWRJdGVtcztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2VsZWN0ZWRFbGVtZW50c0luZGljZXMoc2VsZWN0ZWRFbGVtZW50czogTmdzZ0RyYWdlbGVtZW50W10pOiBudW1iZXJbXSB7XG4gICAgcmV0dXJuIHNlbGVjdGVkRWxlbWVudHMubWFwKChzZWxlY3RlZEVsZW1lbnQ6IE5nc2dEcmFnZWxlbWVudCkgPT4gc2VsZWN0ZWRFbGVtZW50Lm9yaWdpbmFsSW5kZXgpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kRHJvcEluZGV4KHNlbGVjdGVkRWxlbWVudHM6IE5nc2dEcmFnZWxlbWVudFtdLCBlbGVtZW50OiBFbGVtZW50KTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5pc0Ryb3BJblNlbGVjdGlvbihzZWxlY3RlZEVsZW1lbnRzLCBlbGVtZW50KSkge1xuICAgICAgcmV0dXJuIE5nc2dFbGVtZW50c0hlbHBlci5maW5kSW5kZXgoc2VsZWN0ZWRFbGVtZW50c1swXS5ub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIE5nc2dFbGVtZW50c0hlbHBlci5maW5kSW5kZXgoZWxlbWVudCk7XG4gIH1cblxuICBwcml2YXRlIGlzRHJvcEluU2VsZWN0aW9uKGNvbGxlY3Rpb246IE5nc2dEcmFnZWxlbWVudFtdLCBkcm9wRWxlbWVudDogRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIWNvbGxlY3Rpb24uZmluZCgoZHJhZ0VsbWVudDogTmdzZ0RyYWdlbGVtZW50KSA9PiBkcmFnRWxtZW50Lm5vZGUgPT09IGRyb3BFbGVtZW50KTtcbiAgfVxufVxuIl19