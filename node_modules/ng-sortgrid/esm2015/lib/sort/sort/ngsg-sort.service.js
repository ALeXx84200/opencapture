/**
 * @fileoverview added by tsickle
 * Generated from: lib/sort/sort/ngsg-sort.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { timer } from 'rxjs';
import { NgsgClassService } from '../../helpers/class/ngsg-class.service';
import { NgsgElementsHelper } from '../../helpers/element/ngsg-elements.helper';
import { NgsgStoreService } from '../../store/ngsg-store.service';
import * as i0 from "@angular/core";
import * as i1 from "../../helpers/class/ngsg-class.service";
import * as i2 from "../../store/ngsg-store.service";
export class NgsgSortService {
    /**
     * @param {?} classService
     * @param {?} ngsgStore
     */
    constructor(classService, ngsgStore) {
        this.classService = classService;
        this.ngsgStore = ngsgStore;
    }
    /**
     * @param {?} group
     * @return {?}
     */
    initSort(group) {
        this.dragIndex = this.ngsgStore.getFirstSelectItem(group).originalIndex;
        this.dragElements = this.ngsgStore.getSelectedItems(group);
    }
    /**
     * @param {?} dropElement
     * @return {?}
     */
    sort(dropElement) {
        /** @type {?} */
        const hoverIndex = NgsgElementsHelper.findIndex(dropElement);
        /** @type {?} */
        const el = this.getSibling(dropElement, this.dragIndex, hoverIndex);
        if (this.isDropInSelection(el)) {
            return;
        }
        this.dragElements.forEach((/**
         * @param {?} dragElement
         * @return {?}
         */
        (dragElement) => {
            /** @type {?} */
            const insertedNode = dropElement.parentNode.insertBefore(dragElement.node, el.node);
            this.classService.addPlaceHolderClass((/** @type {?} */ (insertedNode)));
        }));
        this.dragIndex = NgsgElementsHelper.findIndex(this.dragElements[0].node);
    }
    /**
     * @return {?}
     */
    endSort() {
        this.dragElements.forEach((/**
         * @param {?} dragElement
         * @return {?}
         */
        (dragElement) => {
            this.updateDropedItem(dragElement.node);
        }));
    }
    /**
     * @private
     * @param {?} dropElement
     * @param {?} dragIndex
     * @param {?} hoverIndex
     * @return {?}
     */
    getSibling(dropElement, dragIndex, hoverIndex) {
        if (dragIndex < hoverIndex) {
            return { node: dropElement.nextSibling, originalIndex: hoverIndex + 1 };
        }
        return { node: dropElement, originalIndex: hoverIndex };
    }
    /**
     * @private
     * @param {?} dropElement
     * @return {?}
     */
    isDropInSelection(dropElement) {
        return !!this.dragElements.find((/**
         * @param {?} dragElment
         * @return {?}
         */
        (dragElment) => dragElment.node === dropElement.node));
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    updateDropedItem(item) {
        this.classService.removePlaceHolderClass(item);
        this.classService.addDroppedClass(item);
        this.classService.removeSelectedClass(item);
        timer(500).subscribe((/**
         * @return {?}
         */
        () => this.classService.removeDroppedClass(item)));
    }
}
NgsgSortService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgsgSortService.ctorParameters = () => [
    { type: NgsgClassService },
    { type: NgsgStoreService }
];
/** @nocollapse */ NgsgSortService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgsgSortService_Factory() { return new NgsgSortService(i0.ɵɵinject(i1.NgsgClassService), i0.ɵɵinject(i2.NgsgStoreService)); }, token: NgsgSortService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgsgSortService.prototype.dragIndex;
    /**
     * @type {?}
     * @private
     */
    NgsgSortService.prototype.dragElements;
    /**
     * @type {?}
     * @private
     */
    NgsgSortService.prototype.classService;
    /**
     * @type {?}
     * @private
     */
    NgsgSortService.prototype.ngsgStore;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdzZy1zb3J0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1zb3J0Z3JpZC9zcmMvbGliL3NvcnQvc29ydC9uZ3NnLXNvcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUU5RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQzs7OztBQUtoRSxNQUFNLE9BQU8sZUFBZTs7Ozs7SUFJMUIsWUFDVSxZQUE4QixFQUM5QixTQUEyQjtRQUQzQixpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFDOUIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFDbEMsQ0FBQzs7Ozs7SUFFRyxRQUFRLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7OztJQUVNLElBQUksQ0FBQyxXQUFvQjs7Y0FDeEIsVUFBVSxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7O2NBQ3RELEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQztRQUVuRSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUM5QixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLFdBQTRCLEVBQUUsRUFBRTs7a0JBQ25ELFlBQVksR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDbkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBQSxZQUFZLEVBQVcsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRSxDQUFDOzs7O0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTzs7OztRQUFDLENBQUMsV0FBNEIsRUFBRSxFQUFFO1lBQ3pELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7OztJQUVPLFVBQVUsQ0FBQyxXQUFnQixFQUFFLFNBQWlCLEVBQUUsVUFBa0I7UUFDeEUsSUFBSSxTQUFTLEdBQUcsVUFBVSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsVUFBVSxHQUFHLENBQUMsRUFBRSxDQUFDO1NBQ3pFO1FBQ0QsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxDQUFDO0lBQzFELENBQUM7Ozs7OztJQUVPLGlCQUFpQixDQUFDLFdBQTRCO1FBQ3BELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSTs7OztRQUFDLENBQUMsVUFBMkIsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsSUFBSSxFQUFDLENBQUM7SUFDekcsQ0FBQzs7Ozs7O0lBRU8sZ0JBQWdCLENBQUMsSUFBYTtRQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQztJQUN6RSxDQUFDOzs7WUFyREYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBUE8sZ0JBQWdCO1lBR2hCLGdCQUFnQjs7Ozs7Ozs7SUFNdEIsb0NBQTBCOzs7OztJQUMxQix1Q0FBd0M7Ozs7O0lBR3RDLHVDQUFzQzs7Ozs7SUFDdEMsb0NBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGltZXIgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtOZ3NnQ2xhc3NTZXJ2aWNlfSBmcm9tICcuLi8uLi9oZWxwZXJzL2NsYXNzL25nc2ctY2xhc3Muc2VydmljZSc7XG5pbXBvcnQge05nc2dFbGVtZW50c0hlbHBlcn0gZnJvbSAnLi4vLi4vaGVscGVycy9lbGVtZW50L25nc2ctZWxlbWVudHMuaGVscGVyJztcbmltcG9ydCB7TmdzZ0RyYWdlbGVtZW50fSBmcm9tICcuLi8uLi9zaGFyZWQvbmdzZy1kcmFnZWxlbWVudC5tb2RlbCc7XG5pbXBvcnQge05nc2dTdG9yZVNlcnZpY2V9IGZyb20gJy4uLy4uL3N0b3JlL25nc2ctc3RvcmUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nc2dTb3J0U2VydmljZSB7XG4gIHByaXZhdGUgZHJhZ0luZGV4OiBudW1iZXI7XG4gIHByaXZhdGUgZHJhZ0VsZW1lbnRzOiBOZ3NnRHJhZ2VsZW1lbnRbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNsYXNzU2VydmljZTogTmdzZ0NsYXNzU2VydmljZSxcbiAgICBwcml2YXRlIG5nc2dTdG9yZTogTmdzZ1N0b3JlU2VydmljZVxuICApIHt9XG5cbiAgcHVibGljIGluaXRTb3J0KGdyb3VwOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmRyYWdJbmRleCA9IHRoaXMubmdzZ1N0b3JlLmdldEZpcnN0U2VsZWN0SXRlbShncm91cCkub3JpZ2luYWxJbmRleDtcbiAgICB0aGlzLmRyYWdFbGVtZW50cyA9IHRoaXMubmdzZ1N0b3JlLmdldFNlbGVjdGVkSXRlbXMoZ3JvdXApO1xuICB9XG5cbiAgcHVibGljIHNvcnQoZHJvcEVsZW1lbnQ6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCBob3ZlckluZGV4ID0gTmdzZ0VsZW1lbnRzSGVscGVyLmZpbmRJbmRleChkcm9wRWxlbWVudCk7XG4gICAgY29uc3QgZWwgPSB0aGlzLmdldFNpYmxpbmcoZHJvcEVsZW1lbnQsIHRoaXMuZHJhZ0luZGV4LCBob3ZlckluZGV4KTtcblxuICAgIGlmICh0aGlzLmlzRHJvcEluU2VsZWN0aW9uKGVsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRyYWdFbGVtZW50cy5mb3JFYWNoKChkcmFnRWxlbWVudDogTmdzZ0RyYWdlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBpbnNlcnRlZE5vZGUgPSBkcm9wRWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkcmFnRWxlbWVudC5ub2RlLCBlbC5ub2RlKTtcbiAgICAgIHRoaXMuY2xhc3NTZXJ2aWNlLmFkZFBsYWNlSG9sZGVyQ2xhc3MoaW5zZXJ0ZWROb2RlIGFzIEVsZW1lbnQpO1xuICAgIH0pO1xuICAgIHRoaXMuZHJhZ0luZGV4ID0gTmdzZ0VsZW1lbnRzSGVscGVyLmZpbmRJbmRleCh0aGlzLmRyYWdFbGVtZW50c1swXS5ub2RlKTtcbiAgfVxuXG4gIHB1YmxpYyBlbmRTb3J0KCk6IHZvaWQge1xuICAgIHRoaXMuZHJhZ0VsZW1lbnRzLmZvckVhY2goKGRyYWdFbGVtZW50OiBOZ3NnRHJhZ2VsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlRHJvcGVkSXRlbShkcmFnRWxlbWVudC5ub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2libGluZyhkcm9wRWxlbWVudDogYW55LCBkcmFnSW5kZXg6IG51bWJlciwgaG92ZXJJbmRleDogbnVtYmVyKTogTmdzZ0RyYWdlbGVtZW50IHwgbnVsbCB7XG4gICAgaWYgKGRyYWdJbmRleCA8IGhvdmVySW5kZXgpIHtcbiAgICAgIHJldHVybiB7IG5vZGU6IGRyb3BFbGVtZW50Lm5leHRTaWJsaW5nLCBvcmlnaW5hbEluZGV4OiBob3ZlckluZGV4ICsgMSB9O1xuICAgIH1cbiAgICByZXR1cm4geyBub2RlOiBkcm9wRWxlbWVudCwgb3JpZ2luYWxJbmRleDogaG92ZXJJbmRleCB9O1xuICB9XG5cbiAgcHJpdmF0ZSBpc0Ryb3BJblNlbGVjdGlvbihkcm9wRWxlbWVudDogTmdzZ0RyYWdlbGVtZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5kcmFnRWxlbWVudHMuZmluZCgoZHJhZ0VsbWVudDogTmdzZ0RyYWdlbGVtZW50KSA9PiBkcmFnRWxtZW50Lm5vZGUgPT09IGRyb3BFbGVtZW50Lm5vZGUpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVEcm9wZWRJdGVtKGl0ZW06IEVsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNsYXNzU2VydmljZS5yZW1vdmVQbGFjZUhvbGRlckNsYXNzKGl0ZW0pO1xuICAgIHRoaXMuY2xhc3NTZXJ2aWNlLmFkZERyb3BwZWRDbGFzcyhpdGVtKTtcbiAgICB0aGlzLmNsYXNzU2VydmljZS5yZW1vdmVTZWxlY3RlZENsYXNzKGl0ZW0pO1xuICAgIHRpbWVyKDUwMCkuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2xhc3NTZXJ2aWNlLnJlbW92ZURyb3BwZWRDbGFzcyhpdGVtKSk7XG4gIH1cbn1cbiJdfQ==