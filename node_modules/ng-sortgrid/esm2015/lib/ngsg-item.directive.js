/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngsg-item.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil, takeWhile, throttleTime } from 'rxjs/operators';
import { NgsgElementsHelper } from './helpers/element/ngsg-elements.helper';
import { ScrollHelperService } from './helpers/scroll/scroll-helper.service';
import { NgsgSelectionService } from './mutliselect/ngsg-selection.service';
import { NgsgEventsService } from './shared/ngsg-events.service';
import { NgsgReflectService } from './sort/reflection/ngsg-reflect.service';
import { NgsgSortService } from './sort/sort/ngsg-sort.service';
import { NgsgStoreService } from './store/ngsg-store.service';
/** @type {?} */
const selector = '[ngSortgridItem]';
export class NgsgItemDirective {
    /**
     * @param {?} el
     * @param {?} sortService
     * @param {?} selectionService
     * @param {?} reflectService
     * @param {?} ngsgStore
     * @param {?} ngsgEventService
     * @param {?} scrollHelperService
     */
    constructor(el, sortService, selectionService, reflectService, ngsgStore, ngsgEventService, scrollHelperService) {
        this.el = el;
        this.sortService = sortService;
        this.selectionService = selectionService;
        this.reflectService = reflectService;
        this.ngsgStore = ngsgStore;
        this.ngsgEventService = ngsgEventService;
        this.scrollHelperService = scrollHelperService;
        this.ngSortGridGroup = 'defaultGroup';
        this.autoScroll = false;
        this.sorted = new EventEmitter();
        this.selected = false;
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngsgEventService.dropped$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => this.selected = false));
        fromEvent(this.el.nativeElement, 'drag').pipe(throttleTime(20), takeUntil(this.destroy$), takeWhile((/**
         * @return {?}
         */
        () => this.autoScroll))).subscribe((/**
         * @return {?}
         */
        () => {
            this.scrollHelperService.scrollIfNecessary(event, {
                top: this.scrollPointTop,
                bottom: this.scrollPointBottom
            }, this.scrollSpeed);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const sortGridItemChanges = changes.ngSortGridItems;
        /** @type {?} */
        const sortGridItems = sortGridItemChanges.currentValue ? sortGridItemChanges.currentValue : [];
        if (!this.ngsgStore.hasGroup(this.ngSortGridGroup)) {
            this.ngsgStore.initState(this.ngSortGridGroup, sortGridItems);
            return;
        }
        this.ngsgStore.setItems(this.ngSortGridGroup, sortGridItems);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.el.nativeElement.draggable = true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragStart(event) {
        if (!this.occuredOnHost(event)) {
            return;
        }
        this.selectionService.selectElementIfNoSelection(this.ngSortGridGroup, event.target);
        this.sortService.initSort(this.ngSortGridGroup);
    }
    /**
     * @return {?}
     */
    dragEnter() {
        if (!this.ngsgStore.hasSelectedItems(this.ngSortGridGroup)) {
            return;
        }
        this.sortService.sort(this.el.nativeElement);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragOver(event) {
        if (event.preventDefault) {
            // Necessary. Allows us to drop.
            event.preventDefault();
        }
        return false;
    }
    /**
     * @return {?}
     */
    drop() {
        if (!this.ngsgStore.hasSelectedItems(this.ngSortGridGroup)) {
            return;
        }
        if (!this.ngsgStore.hasItems(this.ngSortGridGroup)) {
            console.warn(`Ng-sortgrid: No items provided - please use [sortGridItems] to pass in an array of items -
      otherwhise the ordered items can not be emitted in the (sorted) event`);
            return;
        }
        /** @type {?} */
        const previousOrder = [...this.ngsgStore.getItems(this.ngSortGridGroup)];
        this.sortService.endSort();
        /** @type {?} */
        const currentOrder = this.reflectService.reflectChanges(this.ngSortGridGroup, this.el.nativeElement);
        this.sorted.next({ previousOrder, currentOrder });
        this.ngsgStore.resetSelectedItems(this.ngSortGridGroup);
        this.ngsgEventService.dropped$.next();
    }
    /**
     * @return {?}
     */
    clicked() {
        this.selected = !this.isItemCurrentlySelected();
        this.selectionService.updateSelectedDragItem(this.ngSortGridGroup, this.el.nativeElement, this.selected);
    }
    /**
     * @private
     * @return {?}
     */
    isItemCurrentlySelected() {
        /** @type {?} */
        const index = NgsgElementsHelper.findIndex(this.el.nativeElement);
        return !!this.ngsgStore.getSelectedItems(this.ngSortGridGroup)
            .find((/**
         * @param {?} element
         * @return {?}
         */
        element => element.originalIndex === index));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    occuredOnHost(event) {
        return event.target.matches(selector);
    }
}
NgsgItemDirective.decorators = [
    { type: Directive, args: [{ selector },] }
];
/** @nocollapse */
NgsgItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgsgSortService },
    { type: NgsgSelectionService },
    { type: NgsgReflectService },
    { type: NgsgStoreService },
    { type: NgsgEventsService },
    { type: ScrollHelperService }
];
NgsgItemDirective.propDecorators = {
    ngSortGridGroup: [{ type: Input }],
    ngSortGridItems: [{ type: Input }],
    scrollPointTop: [{ type: Input }],
    scrollPointBottom: [{ type: Input }],
    scrollSpeed: [{ type: Input }],
    autoScroll: [{ type: Input }],
    sorted: [{ type: Output }],
    dragStart: [{ type: HostListener, args: ['dragstart', ['$event'],] }],
    dragEnter: [{ type: HostListener, args: ['dragenter',] }],
    dragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
    drop: [{ type: HostListener, args: ['dragend',] }],
    clicked: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    NgsgItemDirective.prototype.ngSortGridGroup;
    /** @type {?} */
    NgsgItemDirective.prototype.ngSortGridItems;
    /** @type {?} */
    NgsgItemDirective.prototype.scrollPointTop;
    /** @type {?} */
    NgsgItemDirective.prototype.scrollPointBottom;
    /** @type {?} */
    NgsgItemDirective.prototype.scrollSpeed;
    /** @type {?} */
    NgsgItemDirective.prototype.autoScroll;
    /** @type {?} */
    NgsgItemDirective.prototype.sorted;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.destroy$;
    /** @type {?} */
    NgsgItemDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.sortService;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.selectionService;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.reflectService;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.ngsgStore;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.ngsgEventService;
    /**
     * @type {?}
     * @private
     */
    NgsgItemDirective.prototype.scrollHelperService;
}
//# sourceMappingURL=data:application/json;base64,